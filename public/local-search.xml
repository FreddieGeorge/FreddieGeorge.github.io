<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DBUS-CXX相关配置</title>
    <link href="/2023/01/16/DBUS-CXX%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/01/16/DBUS-CXX%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="DBUS-CXX"><a href="#DBUS-CXX" class="headerlink" title="DBUS-CXX"></a>DBUS-CXX</h1><hr><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>DBUS-CXX是一个dbus协议基础上提供的C++ api封装。所以我们很多地方可以结合文档和例程直接看源码来进行学习，底层的很多都是linux的官方库。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>需先了解DBUS基础知识，建议看DBUS官方文档</p><p>DBUS-CXX也是建议看官方文档，各个配置环境也先<strong>仔细看对应的文档</strong>再操作</p><p>DBUS-CXX的中文资料较少，耐心看完官方文档</p><p><a href="https://dbus-cxx.github.io/index.html">dbus-cxx: dbus-cxx Library</a></p><p><a href="https://shangenpoden.pixnet.net/blog/post/249943675">[C++]:libsigc++ programming @ 玄根白丁的部落格 :: 痞客邦 :: (pixnet.net)</a></p><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h2><ol><li><p>检查自己是否有cmake并且版本是否大于3.12，若都无，从<a href="https://cmake.org/download/">该网站</a>下载cmake源码</p></li><li><p>解压cmake 源码，之后进入cmake目录执行 <code>sudo ./configure</code>,然后执行<code>sudo make &amp;&amp; make install</code></p></li></ol><h2 id="libsigc"><a href="#libsigc" class="headerlink" title="libsigc++"></a>libsigc++</h2><blockquote><p>从官方文档中可以看到，从压缩包build比git出来的项目更容易，git出来在make的时候会遇到错误</p></blockquote><ol><li><p><code>sudo apt-get install mm-common</code>下载mm-common</p></li><li><p>下载源码 <code>wget https://download.gnome.org/sources/libsigc++/3.0/libsigc%2B%2B-3.0.0.tar.xz</code>  并解压缩，然后进入解压出来的目录</p><blockquote><p>这边选择3.0.0版本，3.2版本利用autotools编译会出现问题，暂时未找到解决方法</p></blockquote></li><li><p><code>mkdir __install</code></p></li><li><p>之后执行<code>./configure  --prefix=$PWD/__install</code>,如果是交叉编译，需要加上<code>--host=xxxx</code></p></li><li><p><code>make &amp;&amp; make install</code> </p></li><li><p>可以看见在__install 下面生成了如下目录，对应着头文件，库文件</p></li></ol><!-- ![Untitled](DBUS-CXX%20ea3c1120e10e4ed2bb59ae12c9b37443/Untitled.png) --><h2 id="dbus-cxx"><a href="#dbus-cxx" class="headerlink" title="dbus-cxx"></a>dbus-cxx</h2><ol><li>下载源码 <code>git clone https://github.com/dbus-cxx/dbus-cxx.git</code></li><li>添加环境变量，指定libsig++安装出来的pkgconfig的位置，该句可以加入你的shell配置文件中<br><code>export PKG_CONFIG_PATH=/home/flork/git/libsigc++-3.0.0/__install/lib/pkgconfig:$PKG_CONFIG_PATH</code></li><li>按照这些步骤安装即可</li></ol><!-- ![Untitled](DBUS-CXX%20ea3c1120e10e4ed2bb59ae12c9b37443/Untitled%201.png) --><p>编译需要添加指令<code>pkg-config --cflags --libs dbus-cxx-2.0</code></p><!-- ![Untitled](DBUS-CXX%20ea3c1120e10e4ed2bb59ae12c9b37443/Untitled%202.png) --><h1 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h1><blockquote><p>例程来自官方文档例程，详细介绍去文档<a href="https://dbus-cxx.github.io/quick_start_example_0.html">dbus-cxx: Quick start example 0: A simple server and client</a></p></blockquote><h2 id="server-cpp"><a href="#server-cpp" class="headerlink" title="server.cpp"></a>server.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dbus-cxx.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">double</span> param1, <span class="hljs-type">double</span> param2)</span> </span>&#123; <span class="hljs-keyword">return</span> param1 + param2; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::shared_ptr&lt;DBus::Dispatcher&gt; dispatcher = DBus::StandaloneDispatcher::<span class="hljs-built_in">create</span>();<br><br>    std::shared_ptr&lt;DBus::Connection&gt; conn = dispatcher-&gt;<span class="hljs-built_in">create_connection</span>(DBus::BusType::SESSION);<br><br>    <span class="hljs-keyword">if</span> (conn-&gt;<span class="hljs-built_in">request_name</span>(<span class="hljs-string">&quot;dbuscxx.quickstart_0.server&quot;</span>, DBUSCXX_NAME_FLAG_REPLACE_EXISTING) != DBus::RequestNameResponse::PrimaryOwner)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// create an object on us</span><br>    std::shared_ptr&lt;DBus::Object&gt; object = conn-&gt;<span class="hljs-built_in">create_object</span>(<span class="hljs-string">&quot;/dbuscxx/quickstart_0&quot;</span>, DBus::ThreadForCalling::DispatcherThread);<br><br>    <span class="hljs-comment">// add a method that can be called over the dbus</span><br>    object-&gt;<span class="hljs-built_in">create_method</span>&lt;<span class="hljs-built_in">double</span>(<span class="hljs-type">double</span>, <span class="hljs-type">double</span>)&gt;(<span class="hljs-string">&quot;dbuscxx.Quickstart&quot;</span>, <span class="hljs-string">&quot;add&quot;</span>, sigc::<span class="hljs-built_in">ptr_fun</span>(add));<br><br>    <span class="hljs-built_in">sleep</span>(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="client-cpp"><a href="#client-cpp" class="headerlink" title="client.cpp"></a>client.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dbus-cxx.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::shared_ptr&lt;DBus::Dispatcher&gt; dispatcher;<br>    dispatcher = DBus::StandaloneDispatcher::<span class="hljs-built_in">create</span>();<br><br>    std::shared_ptr&lt;DBus::Connection&gt; connection;<br>    connection = dispatcher-&gt;<span class="hljs-built_in">create_connection</span>(DBus::BusType::SESSION);<br><br>    <span class="hljs-comment">// create an object proxy, which stands in for a real object.</span><br>    <span class="hljs-comment">// a proxy exists over the dbus</span><br>    std::shared_ptr&lt;DBus::ObjectProxy&gt; object;<br>    object = connection-&gt;<span class="hljs-built_in">create_object_proxy</span>(<span class="hljs-string">&quot;dbuscxx.quickstart_0.server&quot;</span>, <span class="hljs-string">&quot;/dbuscxx/quickstart_0&quot;</span>);<br><br>    <span class="hljs-comment">// a method proxy acts like a real method, but will go over the dbus</span><br>    <span class="hljs-comment">// to do its work.</span><br>    DBus::MethodProxy&lt;<span class="hljs-built_in">double</span>(<span class="hljs-type">double</span>, <span class="hljs-type">double</span>)&gt; &amp;add_proxy = *(object-&gt;<span class="hljs-built_in">create_method</span>&lt;<span class="hljs-built_in">double</span>(<span class="hljs-type">double</span>, <span class="hljs-type">double</span>)&gt;(<span class="hljs-string">&quot;dbuscxx.Quickstart&quot;</span>, <span class="hljs-string">&quot;add&quot;</span>));<br><br>    <span class="hljs-type">double</span> answer;<br>    answer = <span class="hljs-built_in">add_proxy</span>( <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span> );<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;1.1 + 2.2 = &quot;</span> &lt;&lt; answer &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp">.PHONY:clean<br><br>CXXFLAG  = -std=c++<span class="hljs-number">17</span> -O3<br>PKGFLAG       = `pkg-config --cflags --libs dbus-cxx<span class="hljs-number">-2.0</span>`<br><br>SERVER_SRC= server.cpp<br>CLIENT_SRC= client.cpp<br><br>SERVER_TARGET   = server<br>CLIENT_TARGET   = client<br><br>all:$(SERVER_TARGET) $(CLIENT_TARGET)<br><br>$(SERVER_TARGET):$(SERVER_SRC)<br>g++ $(CXXFLAG)  $(SERVER_SRC) -o $(SERVER_TARGET) $(PKGFLAG) <br><br>$(CLIENT_TARGET):$(CLIENT_SRC)<br>g++ $(CXXFLAG) $(CLIENT_SRC) -o $(CLIENT_TARGET) $(PKGFLAG)<br><br>clean:<br>@<span class="hljs-keyword">if</span> [ -e <span class="hljs-string">&quot;$(CLIENT_TARGET)&quot;</span> ] ; then \<br>echo <span class="hljs-string">&quot;rm $(CLIENT_TARGET)&quot;</span> ; \<br>rm $(CLIENT_TARGET) ; \<br>fi;<br><br>@<span class="hljs-keyword">if</span> [ -e <span class="hljs-string">&quot;$(SERVER_TARGET)&quot;</span> ] ; then \<br>echo <span class="hljs-string">&quot;rm $(SERVER_TARGET)&quot;</span> ; \<br>rm $(SERVER_TARGET) ; \<br>fi;<br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>先运行 server ，再运行 client</p><!-- ![Untitled](DBUS-CXX%20ea3c1120e10e4ed2bb59ae12c9b37443/Untitled%203.png) -->]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DBUS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
